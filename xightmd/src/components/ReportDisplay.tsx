'use client';

import { AnalysisResult } from '@/types';
import { useState } from 'react';

interface FindingResult {
  condition: string;
  confidence: number;
  confidence_level: string;
}

interface ReportDisplayProps {
  analysis: AnalysisResult | null;
  isLoading: boolean;
}

export default function ReportDisplay({ analysis, isLoading }: ReportDisplayProps) {
  const [selectedFindings, setSelectedFindings] = useState<string[]>([]);
  const [radiologistNotes, setRadiologistNotes] = useState('');
  const [showValidation, setShowValidation] = useState(false);

  const handleDownloadPDF = () => {
    if (!analysis || !analysis.pdf_data) {
      handleDownloadReport();
      return;
    }
    
    try {
      const binaryString = atob(analysis.pdf_data);
      const bytes = new Uint8Array(binaryString.length);
      for (let i = 0; i < binaryString.length; i++) {
        bytes[i] = binaryString.charCodeAt(i);
      }
      
      const blob = new Blob([bytes], { type: 'application/pdf' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `xray_analysis_${analysis.id}.pdf`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    } catch (error) {
      console.error('Error downloading PDF:', error);
      alert('Error downloading PDF. Downloading text report instead.');
      handleDownloadReport();
    }
  };

  const handleDownloadReport = () => {
    if (!analysis) return;
    
    const reportContent = `
CHEST X-RAY ANALYSIS REPORT
Generated: ${new Date(analysis.timestamp).toLocaleString()}
Analysis ID: ${analysis.id}
Priority Level: ${analysis.urgency >= 4 ? 'High Priority' : analysis.urgency >= 3 ? 'Medium Priority' : 'Normal'}
Confidence: ${(analysis.confidence * 100).toFixed(1)}%

INDICATION:
${analysis.report.indication}

COMPARISON:
${analysis.report.comparison}

FINDINGS:
${analysis.report.findings}

IMPRESSION:
${analysis.report.impression}

KEY FINDINGS:
${analysis.findings.map(finding => `• ${finding}`).join('\n')}

${selectedFindings.length > 0 ? `
RADIOLOGIST VALIDATION:
Confirmed Findings: ${selectedFindings.join(', ')}
` : ''}

${radiologistNotes ? `
ADDITIONAL NOTES:
${radiologistNotes}
` : ''}

---
Generated by XightMD AI-Powered Chest X-ray Analysis System
IMPORTANT: This report is for research and educational purposes only.
Always consult qualified healthcare professionals for medical diagnosis.
    `.trim();
    
    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `xray_analysis_${analysis.id}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const handleShareResults = async () => {
    if (!analysis) return;
    
    const shareText = `XightMD Analysis Results:
• Priority: ${analysis.urgency >= 4 ? 'High' : analysis.urgency >= 3 ? 'Medium' : 'Normal'}
• Confidence: ${(analysis.confidence * 100).toFixed(1)}%
• Key Findings: ${analysis.findings.slice(0, 3).join(', ')}
• Impression: ${analysis.report.impression}
• Analysis ID: ${analysis.id}`;

    try {
      await navigator.clipboard.writeText(shareText);
      alert('Results copied to clipboard!');
    } catch (err) {
      console.error('Failed to copy:', err);
      alert('Failed to copy results to clipboard');
    }
  };

  const getConfidenceBadgeColor = (confidence: number) => {
    if (confidence > 0.6) return 'bg-red-100 text-red-800 border-red-200';
    if (confidence > 0.4) return 'bg-yellow-100 text-yellow-800 border-yellow-200';
    return 'bg-blue-100 text-blue-800 border-blue-200';
  };

  if (isLoading) {
    return (
      <div className="bg-white rounded-xl shadow-lg p-6">
        <h2 className="text-xl font-bold text-gray-900 mb-6">Analysis Results</h2>
        <div className="space-y-4">
          <div className="animate-pulse">
            <div className="h-4 bg-gray-200 rounded w-3/4 mb-2"></div>
            <div className="h-4 bg-gray-200 rounded w-1/2"></div>
          </div>
          <div className="animate-pulse">
            <div className="h-20 bg-gray-200 rounded"></div>
          </div>
          <div className="animate-pulse">
            <div className="h-4 bg-gray-200 rounded w-2/3 mb-2"></div>
            <div className="h-4 bg-gray-200 rounded w-1/3"></div>
          </div>
        </div>
      </div>
    );
  }

  if (!analysis) {
    return (
      <div className="bg-white rounded-xl shadow-lg p-6">
        <h2 className="text-xl font-bold text-gray-900 mb-6">Analysis Results</h2>
        <div className="text-center py-12">
          <div className="w-16 h-16 mx-auto bg-gray-100 rounded-full flex items-center justify-center mb-4">
            <svg className="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
            </svg>
          </div>
          <p className="text-gray-500 text-lg">Upload a chest X-ray to see AI analysis results</p>
          <p className="text-gray-400 text-sm mt-2">Our AI agents will provide detailed findings and impressions</p>
        </div>
      </div>
    );
  }

  return (
    <div className="bg-white rounded-xl shadow-lg p-6 space-y-6">
      <div className="flex items-center justify-between">
        <h2 className="text-xl font-bold text-gray-900">Analysis Results</h2>
        <div className="text-sm text-gray-500">
          {analysis && new Date(analysis.timestamp).toLocaleString()}
        </div>
      </div>

      {analysis && (
        <>
          {analysis.model_analysis.has_critical_findings && (
            <div className="bg-red-50 border-l-4 border-red-500 p-4 rounded">
              <div className="flex items-center">
                <div className="flex-shrink-0">
                  <svg className="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
                    <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                  </svg>
                </div>
                <div className="ml-3">
                  <h3 className="text-sm font-medium text-red-800">Critical Findings Detected</h3>
                  <p className="text-sm text-red-700 mt-1">
                    Urgent review recommended. Multiple significant abnormalities detected.
                  </p>
                </div>
              </div>
            </div>
          )}

          <div className="grid grid-cols-1 gap-4">
            {analysis.model_analysis.top_findings.map((finding: FindingResult, index: number) => (
              <div
                key={index}
                className={`p-4 rounded-lg border ${getConfidenceBadgeColor(finding.confidence)}`}
              >
                <div className="flex justify-between items-start">
                  <div>
                    <h4 className="font-medium">{finding.condition}</h4>
                    <p className="text-sm mt-1">
                      Confidence Level: {finding.confidence_level}
                    </p>
                  </div>
                  <div className="text-right">
                    <span className="text-lg font-bold">
                      {(finding.confidence * 100).toFixed(1)}%
                    </span>
                  </div>
                </div>
              </div>
            ))}
          </div>

          <div className="bg-gray-50 rounded-lg p-4">
            <h3 className="font-semibold text-gray-900 mb-3">All Conditions</h3>
            <div className="space-y-2">
              {Object.entries(analysis.model_analysis.predictions).map(([condition, confidence]) => (
                <div key={condition} className="flex items-center justify-between text-sm">
                  <span className="text-gray-700">{condition}</span>
                  <div className="flex items-center space-x-2">
                    <div className="w-24 h-2 bg-gray-200 rounded-full overflow-hidden">
                      <div
                        className="h-full bg-blue-500 rounded-full"
                        style={{ width: `${confidence * 100}%` }}
                      />
                    </div>
                    <span className="text-gray-600 font-medium w-12 text-right">
                      {(confidence * 100).toFixed(1)}%
                    </span>
                  </div>
                </div>
              ))}
            </div>
          </div>

          <div className="space-y-4">
            <h3 className="font-semibold text-gray-900">Significant Findings</h3>
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
              {Object.entries(analysis.model_analysis.significant_findings)
                .filter(([_, data]) => data.significant)
                .map(([condition, data]) => (
                  <div
                    key={condition}
                    className={`p-3 rounded-lg border ${getConfidenceBadgeColor(data.confidence)}`}
                  >
                    <h4 className="font-medium">{condition}</h4>
                    <div className="flex items-center justify-between mt-2">
                      <span className="text-sm">{data.confidence_level} Confidence</span>
                      <span className="font-bold">{(data.confidence * 100).toFixed(1)}%</span>
                    </div>
                  </div>
              ))}
            </div>
          </div>

          <div className="flex space-x-3 pt-4 border-t">
            <button
              onClick={handleDownloadReport}
              className="flex-1 bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 transition-colors text-sm font-medium flex items-center justify-center space-x-2"
            >
              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
              </svg>
              <span>Download Report</span>
            </button>
            <button
              onClick={handleShareResults}
              className="flex-1 border border-gray-300 text-gray-700 py-2 px-4 rounded-lg hover:bg-gray-50 transition-colors text-sm font-medium flex items-center justify-center space-x-2"
            >
              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z" />
              </svg>
              <span>Share Results</span>
            </button>
          </div>

          <div className="text-xs text-gray-400 text-center pt-2 border-t space-y-1">
            <p>Analysis ID: {analysis.id}</p>
            <p>Model: {analysis.model_info.primary_model}</p>
            <p className="text-red-600 font-medium">
              ⚠️ For research and educational purposes only. Not for clinical diagnosis.
            </p>
          </div>
        </>
      )}
    </div>
  );
}